from flask import Flask, jsonify, request
import requests
import json
from datetime import datetime
import os

app = Flask(__name__)

# Archivo para guardar historial
HISTORIAL_FILE = 'historial_apuestas.json'

@app.route('/')
def home():
    """P√°gina principal del robot"""
    return jsonify({
        'robot': 'ü§ñ SISTEMA DE APUESTAS V3.0',
        'estado': '‚úÖ FUNCIONANDO PERFECTAMENTE',
        'hora': datetime.now().strftime('%d/%m/%Y %H:%M:%S'),
        'servidor': 'Render.com',
        'version': '3.0-STABLE',
        'telegram_configurado': '‚úÖ' if os.getenv('TELEGRAM_TOKEN') else '‚ùå',
        'rutas': {
            '/health': 'Estado del sistema',
            '/test-telegram': 'Probar Telegram AHORA',
            '/webhook': 'Recibir datos de N8N',
            '/historial': 'Ver an√°lisis guardados',
            '/manual': 'Env√≠o manual de prueba'
        }
    })

@app.route('/health')
def health():
    """Estado detallado del sistema"""
    token_ok = bool(os.getenv('TELEGRAM_TOKEN'))
    chat_ok = bool(os.getenv('TELEGRAM_CHAT'))
    
    return jsonify({
        'status': 'üü¢ ONLINE',
        'timestamp': datetime.now().isoformat(),
        'servidor': 'Render Cloud',
        'telegram': {
            'token_configurado': '‚úÖ S√ç' if token_ok else '‚ùå NO',
            'chat_configurado': '‚úÖ S√ç' if chat_ok else '‚ùå NO',
            'listo_para_enviar': 'üü¢ S√ç' if (token_ok and chat_ok) else 'üî¥ NO'
        },
        'archivos': {
            'historial_existe': '‚úÖ' if os.path.exists(HISTORIAL_FILE) else '‚ö™ Nuevo'
        },
        'memoria': '‚úÖ OK',
        'conexion': '‚úÖ OK'
    })

@app.route('/test-telegram')
def test_telegram():
    """üß™ PROBAR TELEGRAM INMEDIATAMENTE"""
    try:
        token = os.getenv('TELEGRAM_TOKEN')
        chat = os.getenv('TELEGRAM_CHAT')
        
        if not token:
            return jsonify({
                'status': '‚ùå ERROR',
                'problema': 'TELEGRAM_TOKEN no configurado en Render',
                'solucion': 'Ve a Environment en Render y agrega TELEGRAM_TOKEN'
            })
        
        if not chat:
            return jsonify({
                'status': '‚ùå ERROR', 
                'problema': 'TELEGRAM_CHAT no configurado en Render',
                'solucion': 'Ve a Environment en Render y agrega TELEGRAM_CHAT'
            })

        # Mensaje de prueba
        mensaje = f"""üß™ PRUEBA EXITOSA - SISTEMA FUNCIONANDO

ü§ñ Robot: ‚úÖ Activo
‚è∞ Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
üåê Servidor: Render.com
üì° Conexi√≥n: Perfecta

üéØ PR√ìXIMOS PASOS:
1. Ejecutar flujo N8N
2. Recibir an√°lisis autom√°ticos
3. ¬°Listo para apostar!

‚úÖ Sistema 100% operativo"""

        # Enviar a Telegram
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        data = {
            'chat_id': chat,
            'text': mensaje,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, json=data, timeout=10)
        
        if response.status_code == 200:
            return jsonify({
                'status': 'üéâ √âXITO TOTAL',
                'mensaje': '‚úÖ Telegram funcionando perfectamente',
                'enviado_a': f'Chat ID: {chat}',
                'codigo': response.status_code,
                'siguiente_paso': 'Ejecutar flujo N8N para recibir an√°lisis reales'
            })
        else:
            return jsonify({
                'status': '‚ö†Ô∏è PROBLEMA',
                'error': f'C√≥digo HTTP: {response.status_code}',
                'respuesta': response.text[:200],
                'posible_causa': 'Chat ID incorrecto o bot bloqueado'
            })
            
    except Exception as e:
        return jsonify({
            'status': 'üí• ERROR T√âCNICO',
            'error': str(e),
            'solucion': 'Verificar variables de entorno en Render'
        })

@app.route('/webhook', methods=['POST'])
def webhook():
    """üì® RECIBIR AN√ÅLISIS DESDE N8N"""
    try:
        datos = request.get_json()
        print(f"üì• N8N ENVIADO: {datos}")
        
        # Crear registro detallado
        registro = {
            'id': f"bet_{int(datetime.now().timestamp())}",
            'timestamp': datetime.now().isoformat(),
            'fecha_analisis': datetime.now().strftime('%d/%m/%Y %H:%M:%S'),
            'partido': datos.get('partido', '‚ùì Sin datos'),
            'liga': datos.get('liga', 'Liga Desconocida'),
            'fecha_partido': datos.get('fecha', 'Sin fecha'),
            'hora_partido': datos.get('hora', 'Sin hora'),
            'cuotas': {
                'local': datos.get('cuotaLocal', 'N/A'),
                'visitante': datos.get('cuotaVisitante', 'N/A'), 
                'empate': datos.get('cuotaEmpate', 'N/A')
            },
            'analisis': {
                'recomendacion': datos.get('recomendacion', '‚ùì Sin an√°lisis'),
                'confianza': datos.get('confianza', '0%'),
                'apostar': datos.get('apostar', '0%'),
                'valor': datos.get('valor', 'NO'),
                'casa': datos.get('casa', 'Desconocida')
            },
            'origen': 'N8N-Robot',
            'estado': 'procesado'
        }
        
        # Guardar en historial
        historial = cargar_historial()
        historial.append(registro)
        historial = historial[-100:]  # √öltimos 100
        guardar_historial(historial)
        
        # ENVIAR SIEMPRE A TELEGRAM
        resultado_telegram = enviar_telegram_analisis(registro)
        
        return jsonify({
            'status': 'üéâ PROCESADO EXITOSAMENTE',
            'registro_id': registro['id'],
            'partido': registro['partido'],
            'telegram': resultado_telegram,
            'guardado': '‚úÖ S√ç',
            'total_historial': len(historial),
            'timestamp': registro['timestamp']
        })
        
    except Exception as e:
        print(f"üí• ERROR WEBHOOK: {e}")
        return jsonify({
            'status': 'üí• ERROR',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/manual')
def manual():
    """üéØ ENV√çO MANUAL DE PRUEBA"""
    # Datos de ejemplo
    registro_prueba = {
        'id': f"manual_{int(datetime.now().timestamp())}",
        'timestamp': datetime.now().isoformat(),
        'fecha_analisis': datetime.now().strftime('%d/%m/%Y %H:%M:%S'),
        'partido': 'REAL MADRID vs BARCELONA',
        'liga': 'La Liga - PRUEBA MANUAL',
        'fecha_partido': datetime.now().strftime('%d/%m/%Y'),
        'hora_partido': '21:00',
        'cuotas': {
            'local': '2.10',
            'visitante': '3.40',
            'empate': '3.20'
        },
        'analisis': {
            'recomendacion': 'üè† REAL MADRID FAVORITO',
            'confianza': '75%',
            'apostar': '3%',
            'valor': 'S√ç',
            'casa': 'Bet365'
        },
        'origen': 'MANUAL-TEST',
        'estado': 'enviado'
    }
    
    # Enviar a Telegram
    resultado = enviar_telegram_analisis(registro_prueba)
    
    # Guardar en historial
    historial = cargar_historial()
    historial.append(registro_prueba)
    guardar_historial(historial)
    
    return jsonify({
        'status': 'üì® ENVIADO MANUALMENTE',
        'telegram': resultado,
        'datos_enviados': registro_prueba,
        'uso': 'Para probar que todo funciona correctamente'
    })

@app.route('/historial')
def historial():
    """üìä VER HISTORIAL COMPLETO"""
    try:
        historial = cargar_historial()
        total = len(historial)
        
        if total == 0:
            return jsonify({
                'mensaje': 'üì≠ Sin an√°lisis a√∫n',
                'total': 0,
                'sugerencia': 'Ejecuta el flujo N8N o usa /manual para enviar pruebas'
            })
        
        # Estad√≠sticas
        con_valor = sum(1 for h in historial if h.get('analisis', {}).get('valor') == 'S√ç')
        manuales = sum(1 for h in historial if 'MANUAL' in h.get('origen', ''))
        
        return jsonify({
            'resumen': {
                'total_analisis': total,
                'con_valor': con_valor,
                'sin_valor': total - con_valor,
                'porcentaje_valor': f"{(con_valor/total*100):.1f}%",
                'envios_manuales': manuales,
                'desde_n8n': total - manuales
            },
            'ultimos_5': historial[-5:],
            'primer_analisis': historial[0]['fecha_analisis'] if historial else None,
            'ultimo_analisis': historial[-1]['fecha_analisis'] if historial else None
        })
        
    except Exception as e:
        return jsonify({
            'error': f'Error cargando historial: {str(e)}'
        })

def cargar_historial():
    """Cargar historial desde archivo"""
    try:
        with open(HISTORIAL_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def guardar_historial(historial):
    """Guardar historial en archivo"""
    try:
        with open(HISTORIAL_FILE, 'w', encoding='utf-8') as f:
            json.dump(historial, f, indent=2, ensure_ascii=False)
    except Exception as e:
        print(f"Error guardando historial: {e}")

def enviar_telegram_analisis(registro):
    """üì± ENVIAR AN√ÅLISIS FORMATEADO A TELEGRAM"""
    try:
        token = os.getenv('TELEGRAM_TOKEN')
        chat = os.getenv('TELEGRAM_CHAT')
        
        if not token or not chat:
            return "‚ùå Telegram no configurado"
        
        # Crear mensaje s√∫per detallado
        cuotas = registro.get('cuotas', {})
        analisis = registro.get('analisis', {})
        
        mensaje = f"""üö® AN√ÅLISIS DE APUESTA DETECTADO üö®

‚öΩ **{registro.get('partido', 'Partido desconocido')}**
üèÜ {registro.get('liga', 'Liga desconocida')}
üìÖ {registro.get('fecha_partido', 'Sin fecha')} a las {registro.get('hora_partido', 'Sin hora')}

üí∞ **CUOTAS ACTUALES:**
üè† Local: **{cuotas.get('local', 'N/A')}**
‚úàÔ∏è Visitante: **{cuotas.get('visitante', 'N/A')}**
ü§ù Empate: **{cuotas.get('empate', 'N/A')}**

üéØ **AN√ÅLISIS COMPLETO:**
üí° Recomendaci√≥n: **{analisis.get('recomendacion', 'Sin recomendaci√≥n')}**
üìä Confianza: **{analisis.get('confianza', '0%')}**
üíé Apostar: **{analisis.get('apostar', '0%')}** del bankroll
‚úÖ Valor detectado: **{analisis.get('valor', 'NO')}**
üè™ Casa de apuestas: **{analisis.get('casa', 'N/A')}**

‚è∞ An√°lisis realizado: {registro.get('fecha_analisis', 'Sin fecha')}
ü§ñ Origen: {registro.get('origen', 'Sistema')}

‚ö†Ô∏è **¬°APUESTA CON RESPONSABILIDAD!**"""

        # Enviar mensaje
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        data = {
            'chat_id': chat,
            'text': mensaje,
            'parse_mode': 'Markdown'
        }
        
        response = requests.post(url, json=data, timeout=10)
        
        if response.status_code == 200:
            return "‚úÖ Enviado correctamente"
        else:
            return f"‚ö†Ô∏è Error: {response.status_code}"
            
    except Exception as e:
        return f"üí• Error t√©cnico: {str(e)}"

if __name__ == '__main__':
    print("üöÄ INICIANDO SISTEMA DE APUESTAS V3.0")
    print("üì° Render.com deployment")
    print("ü§ñ Robot listo para funcionar")
    app.run(
        host='0.0.0.0', 
        port=int(os.environ.get('PORT', 5000)), 
        debug=False
    )
